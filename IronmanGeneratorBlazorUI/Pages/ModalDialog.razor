@inject IJSRuntime JsRuntime

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Generated Character</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <h3>@TeamGenerator.generatedCharacter.CharacterName</h3>
                <img src="@TeamGenerator.generatedCharacter.ImageFileName" width="150" height="150" alt="terry"/>
                <h4>Characters left to generate: @TeamGenerator.charsLeftToGenerate</h4>
                <h4>Characters left in roster: @TeamGenerator.poolOfCharacters.Count</h4>
                <h4>Vetoes Remaining: @TeamGenerator.Vetoes</h4>
                <h4>ReRolls Remaining: @TeamGenerator.ReRolls</h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@ModalAcceptCharacter">OK</button>
                <button type="button" class="btn btn-primary" @onclick="@ModalVetoCharacter">Veto</button>
                <button type="button" class="btn btn-primary" @onclick="@ModalReRollCharacter">ReRoll</button>

            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public List<Character> Team { get; set; }

    [Parameter]
    public TeamGeneration TeamGenerator { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        Console.WriteLine("Cancel");
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        Console.WriteLine("DELETE");
        return OnClose.InvokeAsync(true);
    }

    private Task ModalAcceptCharacter()
    {
        Console.WriteLine("Accepted");
        Team.Add(TeamGenerator.generatedCharacter);
        TeamGenerator.charsLeftToGenerate--;
        TeamGenerator.RemoveCharacterFromPool(TeamGenerator.generatedCharacter);
        return OnClose.InvokeAsync(true);
    }

    private async Task ModalVetoCharacter()
    {
        Console.WriteLine("Vetoed");
        string vetoResult = TeamGenerator.VetoCharacter();
        switch (vetoResult)
        {
            case "success":
                await OnClose.InvokeAsync(true);
                return;
            case "No Vetoes":
                await JsRuntime.InvokeVoidAsync("alert", "No vetoes remaining.");
                return;
            case "Not Enough Characters":
                await JsRuntime.InvokeVoidAsync("alert", "Using a veto now would not leave enough characters to generate a full team. You must accept all remaining characters");
                return;
        }
    }

    private async Task ModalReRollCharacter()
    {
        Console.WriteLine("ReRoll");
        string reRollResult = TeamGenerator.ReRollCharacter();
        switch (reRollResult)
        {
            case "success":
                await OnClose.InvokeAsync(true);
                return;
            case "No ReRolls":
                await JsRuntime.InvokeVoidAsync("alert", "No rerolls remaining.");
                return;
            case "Not Enough Characters":
                await JsRuntime.InvokeVoidAsync("alert", "Using a reroll now would not leave enough characters to generate a full team. You must accept all remaining characters");
                return;
        }
    }
}
