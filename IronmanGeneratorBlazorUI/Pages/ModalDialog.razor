<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <p>@TeamGenerator.generatedCharacter.CharacterName</p>
                <img src="images/terry.png" alt="terry"/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@ModalAcceptCharacter">OK</button>
                <button type="button" class="btn btn-primary">Veto</button>
                <button type="button" class="btn btn-primary">ReRoll</button>

            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public List<Character> Team { get; set; }

    [Parameter]
    public TeamGeneration TeamGenerator { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Task ModalCancel()
    {
        Console.WriteLine("Cancel");
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        Console.WriteLine("DELETE");
        return OnClose.InvokeAsync(true);
    }

    private Task ModalAcceptCharacter()
    {
        Console.WriteLine("Accepted");
        Team.Add(TeamGenerator.generatedCharacter);
        TeamGenerator.RemoveCharacterFromPool(TeamGenerator.generatedCharacter);
        return OnClose.InvokeAsync(true);
    }

    private Task ModalVetoCharacter()
    {
        Console.WriteLine("Vetoed");
        return OnClose.InvokeAsync(true);
    }

    private Task ModalReRollCharacter()
    {
        Console.WriteLine("ReRoll");
        return OnClose.InvokeAsync(true);
    }
}
