@page "/"

@using IronmanGeneratorLibrary.Core;
@inject IJSRuntime JsRuntime

<body>
@if (CharGenModalOpen)
{
	<ModalDialog TeamGenerator="@teamGenerator" Team="@teamToGenerate" OnClose="@OnCharacterGenerateClose"></ModalDialog>
}

<h1>Ironman Team Generator</h1>

<div class="layout-grid-container character" >
	<!-- left player box -->
	<div class="character-grid-container layout-left">
		@foreach (Character character in teamOneCharacters)
			{
				<div class="character-grid-item">
					<img src="@character.ImageFileName" alt="@character.CharacterName"/><br>
					<h3>@character.CharacterName</h3>
				</div>
			}
	</div>

	<!-- Center options box -->
	<div class="options">
		<EditForm Model="@settings">
			<label>
				Number of Characters<br />
				<input type="number" min="1" max="87" class="options-input" id="CharactersNumber" @bind="settings.NumberOfCharacters"/>
			</label>
			<label>
				Number of ReRolls<br />
				<input type="number" min="0" max="87" class="options-input" id="ReRollsNumber" @bind="settings.NumberOfReRolls"/>
			</label>
			<label>
				Number of Vetoes<br />
				<input type="number" min="0" max="87" class="options-input" id="vetoNumber" @bind="settings.NumberOfVetoes"/>
			</label>
		</EditForm>

	</div>

	<!-- right player box -->
	<div class="character-grid-container layout-right">
		@foreach (Character character in teamTwoCharacters)
			{
				<div class="character-grid-item">
					<img src="@character.ImageFileName" alt="@character.CharacterName"/><br>
					<h3>@character.CharacterName</h3>
				</div>
			}
	</div>

	<!-- generation buttons -->
	<button class="layout-bottom layout-left" type="button" onclick="@TeamOneButtonOnClick">Generate Team One</button>

	<button class="layout-bottom layout-right" type="button" onclick="@TeamTwoButtonOnClick">Generate Team Two</button>
</div>

<div class="page-layout-footer">
	temp
</div>

</body>

@code{
	public bool CharGenModalOpen { get; set; }

	public List<Character> teamOneCharacters = new();
	public List<Character> teamTwoCharacters = new();

	public List<Character> teamToGenerate;

	string modalTitle = "Team";

	GenerationSettings settings = new();
	TeamGeneration teamGenerator = new();
	Character generatedCharacter = new();

	int MaxCharactersToGenerate = 86;

	private async void TeamOneButtonOnClick()
	{
		if  (await CheckForValidSettings() == false)
		{
			return;
		}
		teamOneCharacters.Clear();
		teamToGenerate = teamOneCharacters;
		GenerateTeam();
	}

	private async void TeamTwoButtonOnClick()
	{
		if  (await CheckForValidSettings() == false)
		{
			return;
		}
		teamToGenerate = teamTwoCharacters;
		teamTwoCharacters.Clear();
		GenerateTeam();
	}

	public async Task<bool> CheckForValidSettings()
	{
		if(settings.NumberOfCharacters <= 0)
		{
			await JsRuntime.InvokeVoidAsync("alert", "Number of characters must not be 0, please enter a number.");
			return false;
		}
		if(settings.NumberOfCharacters > MaxCharactersToGenerate)
		{
			await JsRuntime.InvokeVoidAsync("alert", string.Format("Too many characters, must be {0} or less", MaxCharactersToGenerate));
			return false;
		}
		return true;
	}

	private void GenerateTeam()
	{
		teamGenerator.FillPool();
		teamGenerator.GenerateTeam(settings.NumberOfCharacters);
		teamGenerator.Vetoes = settings.NumberOfVetoes;
		teamGenerator.ReRolls = settings.NumberOfReRolls;
		OpenCharGenModal();
	}

	private void OpenCharGenModal()
	{
		CharGenModalOpen = true;
		teamGenerator.GenerateCharacter();
		StateHasChanged();
	}

	private void OnCharacterGenerateClose(bool accepted)
	{
		CharGenModalOpen = false;
		StateHasChanged();
		if (teamToGenerate.Count < settings.NumberOfCharacters && accepted == true)
		{
			OpenCharGenModal();
		}
	}

}