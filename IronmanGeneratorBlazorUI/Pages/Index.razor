@page "/"

@using IronmanGeneratorLibrary.Core;

<link rel="stylesheet" href="~/css/index.css"/>
<style>
</style>

<body>

<PageTitle>Index</PageTitle>

@if (CharGenModalOpen)
	{
		<ModalDialog Title="@modalTitle" TeamGenerator="@teamGenerator" Team="@teamToGenerate" OnClose="@OnCharacterGenerateClose"></ModalDialog>
	}

<h1>Hello, world!</h1>

<div class="layout-grid-container character" >
	<!-- left player box -->
	<div class="character-grid-container layout-left">
		@foreach (Character character in teamOneCharacters)
			{
				<div class="character-grid-item">
					<img src="images/terry.png" alt="Terry"/><br>
					<h3>@character.CharacterName</h3>
				</div>
			}
	</div>
	<button type="button" onclick="@TeamOneButtonOnClick">Generate Team One</button>

	<!-- Center options box -->
	<div class="options">
		<EditForm Model="@settings" OnValidSubmit="@HandleValidSettingsSubmit">
			<label>
				Number of Characters<br />
				<input type="number" min="1" max="87" class="options-input" id="CharactersNumber" @bind="settings.NumberOfCharacters"/>
			</label>
			<label>
				Number of ReRolls<br />
				<input type="number" min="0" max="87" class="options-input" id="ReRollsNumber" @bind="settings.NumberOfReRolls"/>
			</label>
			<label>
				Number of Vetoes<br />
				<input type="number" min="0" max="87" class="options-input" id="vetoNumber" @bind="settings.NumberOfVetoes"/>
			</label>

			<button type="submit">Generate Teams</button>
		</EditForm>

	</div>

	<!-- right player box -->
	<div class="character-grid-container layout-right">
		@foreach (Character character in teamTwoCharacters)
			{
				<div class="character-grid-item">
					<img src="images/terry.png" alt="Terry"/><br>
					<h3>@character.CharacterName</h3>
				</div>
			}
	</div>

	<button type="button" onclick="@TeamTwoButtonOnClick">Generate Team Two</button>
</div>

Welcome to your new app.

</body>

@code{
	public bool CharGenModalOpen { get; set; }

	public List<Character> teamOneCharacters = new();
	public List<Character> teamTwoCharacters = new();

	public List<Character> teamToGenerate;

	string modalTitle = "Team";

	GenerationSettings settings = new();
	TeamGeneration teamGenerator = new();
	Character generatedCharacter = new();

	private void HandleValidSettingsSubmit()
	{
		Console.WriteLine("Valid submit");
		Console.WriteLine("{0}, {1}, {2}", settings.NumberOfCharacters, settings.NumberOfReRolls, settings.NumberOfVetoes);
	}

	private void TeamOneButtonOnClick()
	{
		teamToGenerate = teamOneCharacters;
		GenerateTeam();
	}

	private void TeamTwoButtonOnClick()
	{
		teamToGenerate = teamTwoCharacters;
		GenerateTeam();
	}

	private void GenerateTeam()
	{
		teamGenerator.FillPool(true);
		teamGenerator.GenerateTeam(settings.NumberOfCharacters);
		OpenCharGenModal();
	}

	private void OpenCharGenModal()
	{
		CharGenModalOpen = true;
		teamGenerator.GenerateCharacter();
		StateHasChanged();
	}

	private void OnCharacterGenerateClose(bool accepted)
	{
		CharGenModalOpen = false;
		StateHasChanged();
		if (teamToGenerate.Count < settings.NumberOfCharacters)
		{
			OpenCharGenModal();
		}
	}

}